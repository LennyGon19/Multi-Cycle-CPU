LIBRARY ieee; USE ieee.std_logic_1164.all;
USE ieee.std_logic_signed.all;

ENTITY proc IS
PORT ( DIN  : IN  STD_LOGIC_VECTOR(15 DOWNTO 0); 
				Resetn, Clock, Run  : IN  STD_LOGIC;
				Done  : BUFFER  STD_LOGIC;
				BusWires  : BUFFER  STD_LOGIC_VECTOR(15 DOWNTO 0));
END proc;
ARCHITECTURE Behavior OF proc IS

-- COMPONENTS
COMPONENT dec3to8 
PORT ( W : IN STD_LOGIC_VECTOR(2 DOWNTO 0); 
				En : IN STD_LOGIC; 
				Y : OUT STD_LOGIC_VECTOR(0 TO 7)); 
END COMPONENT; 

-- SIGNALS
TYPE State_type IS (T0, T1, T2, T3);
SIGNAL Tstep_Q, Tstep_D: State_type;

SIGNAL R0, R1, R2, R3, R4, R5, R6, R7, A, G : STD_LOGIC_VECTOR(15 DOWNTO 0);
SIGNAL IR : STD_LOGIC_VECTOR(1 to 9);
SIGNAL Rin, Rout : STD_LOGIC_VECTOR(0 TO 7);

SIGNAL HIGH, IRin, DINout, Ain, Gin, Gout : STD_LOGIC;
-- SIGNAL alu_op : STD_LOGIC_VECTOR(2 downto 0);
SIGNAL Xreg, Yreg : STD_LOGIC_VECTOR(0 to 7);  
SIGNAL I : std_LOGIC_VECTOR (2 downto 0); -- op code

SIGNAL alu_result : STD_LOGIC_VECTOR(15 DOWNTO 0); -- sum?
SIGNAL Sel : STD_LOGIC_VECTOR(1 to 10);

SIGNAL reg_display_select : STD_LOGIC_VECTOR(0 to 3);

BEGIN
High <= ’1’;
I <= IR(1 TO 3);
decX: dec3to8 PORT MAP (IR(4 TO 6), High, Xreg);
decY: dec3to8 PORT MAP (IR(7 TO 9), High, Yreg);

statetable: PROCESS (Tstep_Q, Run, Done) 
BEGIN
CASE Tstep_Q IS
	WHEN T0 =>
		IF(Run = ’0’) THEN
			Tstep_D <= T0;
		ELSE
			Tstep_D <= T1;
		END IF; -- data is loaded into IR in this time step
		
		WHEN T1 =>
			IF(Done = '1') THEN
				Tstep_D <= T0;
			ELSE
				Tstep_D <= T2;
				
		WHEN T2 =>
			Tstep_D <= T3;
			
		WHEN T3 =>
			Tstep_D <= T0;
		
END CASE;
END PROCESS;

controlsignals: PROCESS (Tstep_Q, I, Xreg, Yreg)
BEGIN
………. specify initial values
CASE  Tstep_Q  IS
WHEN T0 => -- store DIN in IR as long as Tstep_Q = 0 
IRin <= ’1’;
WHEN T1 => -- define signals in time step T1 
CASE I IS
.………..
END CASE;
WHEN T2 => -- define signals in time step T2
CASE I IS
……….
END CASE;
WHEN T3 => -- define signals in time step T3 
CASE I IS
………..
END CASE;
END CASE;
END PROCESS;
fsmflipflops: PROCESS (Clock, Resetn, Tstep_D)
BEGIN
…………
END PROCESS;
reg_0: regn PORT MAP (BusWires, Rin(0), Clock, R0);
………..instantiate other registers and the add/sub unit
………..define the bus 
END Behavior;